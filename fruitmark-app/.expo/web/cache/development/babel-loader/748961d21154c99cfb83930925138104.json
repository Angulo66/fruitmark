{"ast":null,"code":"import { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nexport function getDeviceHeight(statusBarTranslucent, height) {\n  if (Platform.OS === 'ios') return height;\n  var currentStatusbarHeight = StatusBar.currentHeight || 0;\n  var height = height + currentStatusbarHeight - 3;\n\n  if (!statusBarTranslucent) {\n    return height - currentStatusbarHeight;\n  }\n\n  return height;\n}\nexport var getElevation = function getElevation(elevation) {\n  return {\n    elevation: elevation,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0.3 * elevation,\n      height: 0.5 * elevation\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 0.7 * elevation\n  };\n};\nexport var SUPPORTED_ORIENTATIONS = ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'];\nexport var waitAsync = function waitAsync(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve(null);\n    }, ms);\n  });\n};\n\n_NativeWindStyleSheet.create({\n  styles: {\n    \"elevation\": {\n      \"elevation\": 3\n    }\n  }\n});","map":{"version":3,"names":["getDeviceHeight","statusBarTranslucent","height","Platform","OS","currentStatusbarHeight","StatusBar","currentHeight","getElevation","elevation","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","SUPPORTED_ORIENTATIONS","waitAsync","ms","Promise","resolve","setTimeout"],"sources":["/Users/helder/repos/tests/fruitmark-mini-repo/fruitmark-app/node_modules/react-native-actions-sheet/dist/src/utils.js"],"sourcesContent":["import { Platform, StatusBar } from 'react-native';\nexport function getDeviceHeight(statusBarTranslucent, height) {\n    if (Platform.OS === 'ios')\n        return height;\n    var currentStatusbarHeight = StatusBar.currentHeight || 0;\n    var height = height + currentStatusbarHeight - 3;\n    if (!statusBarTranslucent) {\n        return height - currentStatusbarHeight;\n    }\n    return height;\n}\nexport var getElevation = function (elevation) {\n    return {\n        elevation: elevation,\n        shadowColor: 'black',\n        shadowOffset: { width: 0.3 * elevation, height: 0.5 * elevation },\n        shadowOpacity: 0.2,\n        shadowRadius: 0.7 * elevation\n    };\n};\nexport var SUPPORTED_ORIENTATIONS = [\n    'portrait',\n    'portrait-upside-down',\n    'landscape',\n    'landscape-left',\n    'landscape-right',\n];\nexport var waitAsync = function (ms) {\n    return new Promise(function (resolve) {\n        setTimeout(function () {\n            resolve(null);\n        }, ms);\n    });\n};\n"],"mappings":";;;AACA,OAAO,SAASA,eAAT,CAAyBC,oBAAzB,EAA+CC,MAA/C,EAAuD;EAC1D,IAAIC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EACI,OAAOF,MAAP;EACJ,IAAIG,sBAAsB,GAAGC,SAAS,CAACC,aAAV,IAA2B,CAAxD;EACA,IAAIL,MAAM,GAAGA,MAAM,GAAGG,sBAAT,GAAkC,CAA/C;;EACA,IAAI,CAACJ,oBAAL,EAA2B;IACvB,OAAOC,MAAM,GAAGG,sBAAhB;EACH;;EACD,OAAOH,MAAP;AACH;AACD,OAAO,IAAIM,YAAY,GAAG,SAAfA,YAAe,CAAUC,SAAV,EAAqB;EAC3C,OAAO;IACHA,SAAS,EAAEA,SADR;IAEHC,WAAW,EAAE,OAFV;IAGHC,YAAY,EAAE;MAAEC,KAAK,EAAE,MAAMH,SAAf;MAA0BP,MAAM,EAAE,MAAMO;IAAxC,CAHX;IAIHI,aAAa,EAAE,GAJZ;IAKHC,YAAY,EAAE,MAAML;EALjB,CAAP;AAOH,CARM;AASP,OAAO,IAAIM,sBAAsB,GAAG,CAChC,UADgC,EAEhC,sBAFgC,EAGhC,WAHgC,EAIhC,gBAJgC,EAKhC,iBALgC,CAA7B;AAOP,OAAO,IAAIC,SAAS,GAAG,SAAZA,SAAY,CAAUC,EAAV,EAAc;EACjC,OAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;IAClCC,UAAU,CAAC,YAAY;MACnBD,OAAO,CAAC,IAAD,CAAP;IACH,CAFS,EAEPF,EAFO,CAAV;EAGH,CAJM,CAAP;AAKH,CANM"},"metadata":{},"sourceType":"module"}